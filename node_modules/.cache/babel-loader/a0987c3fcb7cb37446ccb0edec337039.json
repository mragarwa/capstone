{"ast":null,"code":"var _jsxFileName = \"/Users/mansiagarwal/Desktop/Capstone/src/components/session.js\";\nimport React, { Component } from 'react';\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils';\nimport { canPlay, MATCH_URL_YOUTUBE } from '../patterns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SDK_URL = 'https://www.youtube.com/iframe_api';\nconst SDK_GLOBAL = 'YT';\nconst SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady';\nconst MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/;\nconst MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/;\nconst MATCH_NOCOOKIE = /youtube-nocookie\\.com/;\nconst NOCOOKIE_HOST = 'https://www.youtube-nocookie.com';\nexport default class YouTube extends Component {\n  constructor(...args) {\n    super(...args);\n    this.callPlayer = callPlayer;\n\n    this.parsePlaylist = url => {\n      if (url instanceof Array) {\n        return {\n          listType: 'playlist',\n          playlist: url.map(this.getID).join(',')\n        };\n      }\n\n      if (MATCH_PLAYLIST.test(url)) {\n        const [, playlistId] = url.match(MATCH_PLAYLIST);\n        return {\n          listType: 'playlist',\n          list: playlistId.replace(/^UC/, 'UU')\n        };\n      }\n\n      if (MATCH_USER_UPLOADS.test(url)) {\n        const [, username] = url.match(MATCH_USER_UPLOADS);\n        return {\n          listType: 'user_uploads',\n          list: username\n        };\n      }\n\n      return {};\n    };\n\n    this.onStateChange = event => {\n      const {\n        data\n      } = event;\n      const {\n        onPlay,\n        onPause,\n        onBuffer,\n        onBufferEnd,\n        onEnded,\n        onReady,\n        loop,\n        config: {\n          playerVars,\n          onUnstarted\n        }\n      } = this.props;\n      const {\n        UNSTARTED,\n        PLAYING,\n        PAUSED,\n        BUFFERING,\n        ENDED,\n        CUED\n      } = window[SDK_GLOBAL].PlayerState;\n      if (data === UNSTARTED) onUnstarted();\n\n      if (data === PLAYING) {\n        onPlay();\n        onBufferEnd();\n      }\n\n      if (data === PAUSED) onPause();\n      if (data === BUFFERING) onBuffer();\n\n      if (data === ENDED) {\n        const isPlaylist = !!this.callPlayer('getPlaylist'); // Only loop manually if not playing a playlist\n\n        if (loop && !isPlaylist) {\n          if (playerVars.start) {\n            this.seekTo(playerVars.start);\n          } else {\n            this.play();\n          }\n        }\n\n        onEnded();\n      }\n\n      if (data === CUED) onReady();\n    };\n\n    this.mute = () => {\n      this.callPlayer('mute');\n    };\n\n    this.unmute = () => {\n      this.callPlayer('unMute');\n    };\n\n    this.ref = container => {\n      this.container = container;\n    };\n  }\n\n  componentDidMount() {\n    this.props.onMount && this.props.onMount(this);\n  }\n\n  getID(url) {\n    if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n      return null;\n    }\n\n    return url.match(MATCH_URL_YOUTUBE)[1];\n  }\n\n  load(url, isReady) {\n    const {\n      playing,\n      muted,\n      playsinline,\n      controls,\n      loop,\n      config,\n      onError\n    } = this.props;\n    const {\n      playerVars,\n      embedOptions\n    } = config;\n    const id = this.getID(url);\n\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n        this.player.loadPlaylist(this.parsePlaylist(url));\n        return;\n      }\n\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: parseStartTime(url) || playerVars.start,\n        endSeconds: parseEndTime(url) || playerVars.end\n      });\n      return;\n    }\n\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return;\n      this.player = new YT.Player(this.container, {\n        width: '100%',\n        height: '100%',\n        videoId: id,\n        playerVars: {\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: parseStartTime(url),\n          end: parseEndTime(url),\n          origin: window.location.origin,\n          playsinline: playsinline ? 1 : 0,\n          ...this.parsePlaylist(url),\n          ...playerVars\n        },\n        events: {\n          onReady: () => {\n            if (loop) {\n              this.player.setLoop(true); // Enable playlist looping\n            }\n\n            this.props.onReady();\n          },\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        },\n        host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined,\n        ...embedOptions\n      });\n    }, onError);\n\n    if (embedOptions.events) {\n      console.warn('Using `embedOptions.events` will likely break things. Use ReactPlayerâ€™s callback props instead, eg onReady, onPlay, onPause');\n    }\n  }\n\n  play() {\n    this.callPlayer('playVideo');\n  }\n\n  pause() {\n    this.callPlayer('pauseVideo');\n  }\n\n  stop() {\n    if (!document.body.contains(this.callPlayer('getIframe'))) return;\n    this.callPlayer('stopVideo');\n  }\n\n  seekTo(amount) {\n    this.callPlayer('seekTo', amount);\n\n    if (!this.props.playing) {\n      this.pause();\n    }\n  }\n\n  setVolume(fraction) {\n    this.callPlayer('setVolume', fraction * 100);\n  }\n\n  setPlaybackRate(rate) {\n    this.callPlayer('setPlaybackRate', rate);\n  }\n\n  setLoop(loop) {\n    this.callPlayer('setLoop', loop);\n  }\n\n  getDuration() {\n    return this.callPlayer('getDuration');\n  }\n\n  getCurrentTime() {\n    return this.callPlayer('getCurrentTime');\n  }\n\n  getSecondsLoaded() {\n    return this.callPlayer('getVideoLoadedFraction') * this.getDuration();\n  }\n\n  render() {\n    const {\n      display\n    } = this.props;\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.ref\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nYouTube.displayName = 'YouTube';\nYouTube.canPlay = canPlay.youtube;","map":{"version":3,"sources":["/Users/mansiagarwal/Desktop/Capstone/src/components/session.js"],"names":["React","Component","callPlayer","getSDK","parseStartTime","parseEndTime","canPlay","MATCH_URL_YOUTUBE","SDK_URL","SDK_GLOBAL","SDK_GLOBAL_READY","MATCH_PLAYLIST","MATCH_USER_UPLOADS","MATCH_NOCOOKIE","NOCOOKIE_HOST","YouTube","parsePlaylist","url","Array","listType","playlist","map","getID","join","test","playlistId","match","list","replace","username","onStateChange","event","data","onPlay","onPause","onBuffer","onBufferEnd","onEnded","onReady","loop","config","playerVars","onUnstarted","props","UNSTARTED","PLAYING","PAUSED","BUFFERING","ENDED","CUED","window","PlayerState","isPlaylist","start","seekTo","play","mute","unmute","ref","container","componentDidMount","onMount","load","isReady","playing","muted","playsinline","controls","onError","embedOptions","id","player","loadPlaylist","cueVideoById","videoId","startSeconds","endSeconds","end","YT","loaded","then","Player","width","height","autoplay","origin","location","events","setLoop","host","undefined","console","warn","pause","stop","document","body","contains","amount","setVolume","fraction","setPlaybackRate","rate","getDuration","getCurrentTime","getSecondsLoaded","render","display","style","displayName","youtube"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport { callPlayer, getSDK, parseStartTime, parseEndTime } from '../utils'\nimport { canPlay, MATCH_URL_YOUTUBE } from '../patterns'\n\nconst SDK_URL = 'https://www.youtube.com/iframe_api'\nconst SDK_GLOBAL = 'YT'\nconst SDK_GLOBAL_READY = 'onYouTubeIframeAPIReady'\nconst MATCH_PLAYLIST = /[?&](?:list|channel)=([a-zA-Z0-9_-]+)/\nconst MATCH_USER_UPLOADS = /user\\/([a-zA-Z0-9_-]+)\\/?/\nconst MATCH_NOCOOKIE = /youtube-nocookie\\.com/\nconst NOCOOKIE_HOST = 'https://www.youtube-nocookie.com'\n\nexport default class YouTube extends Component {\n  static displayName = 'YouTube'\n  static canPlay = canPlay.youtube\n  callPlayer = callPlayer\n\n  componentDidMount () {\n    this.props.onMount && this.props.onMount(this)\n  }\n\n  getID (url) {\n    if (!url || url instanceof Array || MATCH_PLAYLIST.test(url)) {\n      return null\n    }\n    return url.match(MATCH_URL_YOUTUBE)[1]\n  }\n\n  load (url, isReady) {\n    const { playing, muted, playsinline, controls, loop, config, onError } = this.props\n    const { playerVars, embedOptions } = config\n    const id = this.getID(url)\n    if (isReady) {\n      if (MATCH_PLAYLIST.test(url) || MATCH_USER_UPLOADS.test(url) || url instanceof Array) {\n        this.player.loadPlaylist(this.parsePlaylist(url))\n        return\n      }\n      this.player.cueVideoById({\n        videoId: id,\n        startSeconds: parseStartTime(url) || playerVars.start,\n        endSeconds: parseEndTime(url) || playerVars.end\n      })\n      return\n    }\n    getSDK(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, YT => YT.loaded).then(YT => {\n      if (!this.container) return\n      this.player = new YT.Player(this.container, {\n        width: '100%',\n        height: '100%',\n        videoId: id,\n        playerVars: {\n          autoplay: playing ? 1 : 0,\n          mute: muted ? 1 : 0,\n          controls: controls ? 1 : 0,\n          start: parseStartTime(url),\n          end: parseEndTime(url),\n          origin: window.location.origin,\n          playsinline: playsinline ? 1 : 0,\n          ...this.parsePlaylist(url),\n          ...playerVars\n        },\n        events: {\n          onReady: () => {\n            if (loop) {\n              this.player.setLoop(true) // Enable playlist looping\n            }\n            this.props.onReady()\n          },\n          onStateChange: this.onStateChange,\n          onError: event => onError(event.data)\n        },\n        host: MATCH_NOCOOKIE.test(url) ? NOCOOKIE_HOST : undefined,\n        ...embedOptions\n      })\n    }, onError)\n    if (embedOptions.events) {\n      console.warn('Using `embedOptions.events` will likely break things. Use ReactPlayerâ€™s callback props instead, eg onReady, onPlay, onPause')\n    }\n  }\n\n  parsePlaylist = (url) => {\n    if (url instanceof Array) {\n      return {\n        listType: 'playlist',\n        playlist: url.map(this.getID).join(',')\n      }\n    }\n    if (MATCH_PLAYLIST.test(url)) {\n      const [, playlistId] = url.match(MATCH_PLAYLIST)\n      return {\n        listType: 'playlist',\n        list: playlistId.replace(/^UC/, 'UU')\n      }\n    }\n    if (MATCH_USER_UPLOADS.test(url)) {\n      const [, username] = url.match(MATCH_USER_UPLOADS)\n      return {\n        listType: 'user_uploads',\n        list: username\n      }\n    }\n    return {}\n  }\n\n  onStateChange = (event) => {\n    const { data } = event\n    const { onPlay, onPause, onBuffer, onBufferEnd, onEnded, onReady, loop, config: { playerVars, onUnstarted } } = this.props\n    const { UNSTARTED, PLAYING, PAUSED, BUFFERING, ENDED, CUED } = window[SDK_GLOBAL].PlayerState\n    if (data === UNSTARTED) onUnstarted()\n    if (data === PLAYING) {\n      onPlay()\n      onBufferEnd()\n    }\n    if (data === PAUSED) onPause()\n    if (data === BUFFERING) onBuffer()\n    if (data === ENDED) {\n      const isPlaylist = !!this.callPlayer('getPlaylist')\n      // Only loop manually if not playing a playlist\n      if (loop && !isPlaylist) {\n        if (playerVars.start) {\n          this.seekTo(playerVars.start)\n        } else {\n          this.play()\n        }\n      }\n      onEnded()\n    }\n    if (data === CUED) onReady()\n  }\n\n  play () {\n    this.callPlayer('playVideo')\n  }\n\n  pause () {\n    this.callPlayer('pauseVideo')\n  }\n\n  stop () {\n    if (!document.body.contains(this.callPlayer('getIframe'))) return\n    this.callPlayer('stopVideo')\n  }\n\n  seekTo (amount) {\n    this.callPlayer('seekTo', amount)\n    if (!this.props.playing) {\n      this.pause()\n    }\n  }\n\n  setVolume (fraction) {\n    this.callPlayer('setVolume', fraction * 100)\n  }\n\n  mute = () => {\n    this.callPlayer('mute')\n  }\n\n  unmute = () => {\n    this.callPlayer('unMute')\n  }\n\n  setPlaybackRate (rate) {\n    this.callPlayer('setPlaybackRate', rate)\n  }\n\n  setLoop (loop) {\n    this.callPlayer('setLoop', loop)\n  }\n\n  getDuration () {\n    return this.callPlayer('getDuration')\n  }\n\n  getCurrentTime () {\n    return this.callPlayer('getCurrentTime')\n  }\n\n  getSecondsLoaded () {\n    return this.callPlayer('getVideoLoadedFraction') * this.getDuration()\n  }\n\n  ref = container => {\n    this.container = container\n  }\n\n  render () {\n    const { display } = this.props\n    const style = {\n      width: '100%',\n      height: '100%',\n      display\n    }\n    return (\n      <div style={style}>\n        <div ref={this.ref} />\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}